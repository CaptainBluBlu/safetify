// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // schemas   = ["public", "auth"]
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["multiSchema"]
}

enum UserRole {
  USER
  ADMIN
  LAWYER
  THERAPIST

  // @@schema("public")
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id         String @id @default(cuid()) @map(name: "UserId")
  authUserId String @unique
  name       String
  username   String
  gender     Gender
  icNumber   String
  email      String @unique

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  lastLogin        DateTime?
  phoneNumber      String?
  emergencyContact EmergencyContact[]
  journalPost      Journal[]          @relation("author")
  userTypes        UserRole           @default(USER)
  PanicButton      PanicButton[]
  lawyerId         String?            @unique
  Lawyer           User?              @relation("lawyer", fields: [lawyerId], references: [id], onDelete: SetNull)
  therapistId      String?            @unique
  Therapist        User?              @relation("therapist", fields: [therapistId], references: [id], onDelete: SetNull)
  ChatRooms        ChatRooms[]        @relation("ChatRoomParticipants")
  chatRoomsId      String?
  clientLawyer     User[]             @relation("lawyer")
  clientTherapist  User[]             @relation("therapist")
  SupportPost      SupportPost[]
  Message          Message[]
  ChatRoomOwner    ChatRooms[]        @relation("ChatRoomOwner")
  AbuseReport      AbuseReport[]

  @@index([email, username])
}

model SupportPost {
  id        String   @id @default(cuid())
  title     String
  content   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmergencyContact {
  id                String @id @default(cuid())
  name              String
  phone             String
  position          String
  emergencyPerson   User   @relation(fields: [emergencyPersonId], references: [id])
  emergencyPersonId String @map("emergency_person_id")

  //foreign key to user id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmergencyHousing {
  id               String   @id @default(cuid())
  personInCharged  String
  phone            String
  address          String
  geoLocation      Json
  longtitude       Float
  latitude         Float
  status           String
  currentOccupants Int
  capacity         Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

enum Relationship {
  FAMILY
  FRIEND
  PARTNER
  OTHER
}

enum AbuseType {
  PHYSICAL
  EMOTIONAL
  FINANCIAL
  SEXUAL
  OTHER
}

enum Ethnicity {
  MALAY
  CHINESE
  INDIAN
  OTHER
}

model AbuseReport {
  id                          String       @id @default(cuid())
  name                        String
  reportedUserId              String
  reportedUser                User         @relation(fields: [reportedUserId], references: [id])
  age                         Int
  relationshipWithPrepetrator Relationship
  typeOfAbuse                 AbuseType
  ethnicity                   Ethnicity
  isChildren                  Boolean
  needTranslator              Boolean
  lastDateOfAbuse             DateTime
  LegalReport                 LegalReport?
}

model LegalReport {
  id           String @id @default(cuid())
  title        String
  statement    String
  address      String
  city         String
  state        String
  zipCode      String
  mobileNumber String

  hasWitness    Boolean
  reportingFor  String?
  dateRequested DateTime
  status        String
  comments      String
  abuseReport   AbuseReport? @relation(fields: [abuseReportID], references: [id])
  abuseReportID String?      @unique
  isCoverReport Boolean      @default(false)
  evidences     Evidence[]
}

model Evidence {
  id            String      @id @default(cuid())
  fileURL       String[]
  legalReport   LegalReport @relation(fields: [legalReportID], references: [id])
  legalReportID String      @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Journal {
  id          String    @id @default(cuid())
  owner       User      @relation("author", fields: [ownerId], references: [id])
  ownerId     String    @map("owner_id")
  title       String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    String
  repliedById String?   @map("replied_by_id")
  repliedAt   DateTime?
  private     Boolean   @default(true)

  // @@schema("public")
}

model PanicButton {
  id         String            @id @default(cuid())
  userId     String            @map("user_id")
  user       User              @relation(fields: [userId], references: [id])
  status     PanicButtonStatus
  longtitude Float
  latitude   Float
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  // @@schema("public")
}

enum PanicButtonStatus {
  SAFE
  DANGER
  RESOLVED

  // @@schema("public")
}

model ChatRooms {
  id            String    @id @default(cuid())
  chatRoomName  String
  description   String
  participantId String[]
  participants  User[]    @relation("ChatRoomParticipants")
  memeberCount  Int
  creatorId     String
  Creator       User      @relation("ChatRoomOwner", fields: [creatorId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Message       Message[]

  // @@schema("public")
}

model Message {
  id             String     @id @default(uuid())
  text           String
  createdAt      DateTime   @default(now())
  senderId       String
  sender         User       @relation(fields: [senderId], references: [id])
  Conversation   ChatRooms? @relation(fields: [conversationId], references: [id])
  conversationId String?

  // @@schema("public")
}
