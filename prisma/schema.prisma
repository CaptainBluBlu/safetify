// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}

enum Role {
  USER
  ADMIN
  VOLUNTEER
}

model User {
  id               String             @id @default(cuid()) @map(name: "UserId")
  name             String?
  email            String?            @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  posts            Post[]
  lastLogin        DateTime?
  phoneNumber      String?
  emergencyContact EmergencyContact[]
  journalPost      Journal[]          @relation("author")
  userTypes        Role

  @@index([email])
}

model EmergencyContact {
  id              String @id @default(cuid())
  name            String
  phone           String
  position        String
  emergencyPerson User   @relation(fields: [userId], references: [id])
  userId          String @map("emergency_person_id")

  //foreign key to user id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmergencyHousing {
  id               String   @id @default(cuid())
  personInCharged  String
  phone            String
  address          String
  geoLocation      Json
  longtitude       Float
  latitude         Float
  status           String
  currentOccupants Int
  capacity         Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model LegalReport {
  id            String   @id @default(cuid())
  title         String
  statement     String
  address       String
  city          String
  state         String
  zipCode       String
  mobileNumber  String
  //evidence   Evidence? @relation("", fields: [evidenceID], references: [id])
  //evidenceID  String @unique
  hasWitness    Boolean
  reportingFor  String?
  dateRequested DateTime
  status        String
  comments      String
}

model Evidence {
  id        String   @id @default(cuid())
  //legalReport LegalReport? @relation("", fields: [legalReportID], references: [id])
  //legalReportID String @unique
  //evidenceType EvidenceType? @relation("", fields: [evidenceTypeID], references: [id])
  //evidenceTypeID String @unique
  files     Json
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Journal {
  id          String    @id @default(cuid())
  owner       User      @relation("author", fields: [ownerId], references: [id])
  ownerId     String    @map("owner_id")
  title       String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    String
  //repliedById String? 
  // create a new attributed called "replied by" which links to the user table, figure out how to do this later
  //repliedBy   User?     @relation("repliedBy", fields: [repliedById], references: [id])
  repliedById String?   @map("replied_by_id")
  repliedAt   DateTime?
}
